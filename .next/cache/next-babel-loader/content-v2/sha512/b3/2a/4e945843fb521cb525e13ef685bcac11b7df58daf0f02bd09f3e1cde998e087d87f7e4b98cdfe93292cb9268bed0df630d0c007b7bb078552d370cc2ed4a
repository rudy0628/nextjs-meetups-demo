{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react-course\\\\23-nextjs-introduction\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\nimport { MongoClient } from 'mongodb';\n\nconst MeetupDetailsPage = () => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: \"https://images.unsplash.com/photo-1642871286987-2592c26407e2?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=764&q=80\",\n    title: \"The first Meetup\",\n    address: \"New York Avenue Northeast, Washington, District of Columbia, 20722, United States\",\n    description: \"The first Meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://rudu:B2Q0zzLvhzyqFuv5@cluster0.pjcia.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); // fetch all meetups, but only contains _id key.\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupdId: meetup._id.toString()\n      }\n    }))\n  };\n}; // we don't change meetup data multiple request in one second\n\nexport const getStaticProps = async context => {\n  // context also can get current path params\n  const meetupId = context.params.meetupId;\n  return {\n    props: {\n      meetupData: {\n        image: 'https://images.unsplash.com/photo-1642871286987-2592c26407e2?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=764&q=80',\n        title: 'The first Meetup',\n        address: 'New York Avenue Northeast, Washington, District of Columbia, 20722, United States',\n        id: {\n          meetupId\n        },\n        description: 'The first Meetup'\n      }\n    }\n  };\n};\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["C:/Users/User/Desktop/react-course/23-nextjs-introduction/pages/[meetupId]/index.js"],"names":["MeetupDetails","MongoClient","MeetupDetailsPage","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupdId","toString","getStaticProps","context","meetupId","props","meetupData","image","title","address","id","description"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,wCAA1B;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC/B,sBACC,QAAC,aAAD;AACC,IAAA,KAAK,EAAC,+JADP;AAEC,IAAA,KAAK,EAAC,kBAFP;AAGC,IAAA,OAAO,EAAC,mFAHT;AAIC,IAAA,WAAW,EAAC;AAJb;AAAA;AAAA;AAAA;AAAA,UADD;AAQA,CATD;;AAUA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACzC,QAAMC,MAAM,GAAG,MAAMH,WAAW,CAACI,OAAZ,CACpB,oGADoB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CALyC,CAOzC;;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEA,SAAO;AACNC,IAAAA,QAAQ,EAAE,KADJ;AAENC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAK;AAC7BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,SAAS,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAb;AADqB,KAAL,CAAlB;AAFD,GAAP;AAMA,CAhBM,C,CAkBP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAiB;AAC9C;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAACJ,MAAR,CAAeK,QAAhC;AAEA,SAAO;AACNC,IAAAA,KAAK,EAAE;AACNC,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EACJ,+JAFU;AAGXC,QAAAA,KAAK,EAAE,kBAHI;AAIXC,QAAAA,OAAO,EACN,mFALU;AAMXC,QAAAA,EAAE,EAAE;AAAEN,UAAAA;AAAF,SANO;AAOXO,QAAAA,WAAW,EAAE;AAPF;AADN;AADD,GAAP;AAaA,CAjBM;AAmBP,eAAe3B,iBAAf","sourcesContent":["import MeetupDetails from '../../components/meetups/MeetupDetails';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst MeetupDetailsPage = () => {\r\n\treturn (\r\n\t\t<MeetupDetails\r\n\t\t\timage=\"https://images.unsplash.com/photo-1642871286987-2592c26407e2?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=764&q=80\"\r\n\t\t\ttitle=\"The first Meetup\"\r\n\t\t\taddress=\"New York Avenue Northeast, Washington, District of Columbia, 20722, United States\"\r\n\t\t\tdescription=\"The first Meetup\"\r\n\t\t/>\r\n\t);\r\n};\r\nexport const getStaticPaths = async () => {\r\n\tconst client = await MongoClient.connect(\r\n\t\t'mongodb+srv://rudu:B2Q0zzLvhzyqFuv5@cluster0.pjcia.mongodb.net/meetups?retryWrites=true&w=majority'\r\n\t);\r\n\tconst db = client.db();\r\n\tconst meetupsCollection = db.collection('meetups');\r\n\r\n\t// fetch all meetups, but only contains _id key.\r\n\tconst meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n\treturn {\r\n\t\tfallback: false,\r\n\t\tpaths: meetups.map(meetup => ({\r\n\t\t\tparams: { meetupdId: meetup._id.toString() },\r\n\t\t})),\r\n\t};\r\n};\r\n\r\n// we don't change meetup data multiple request in one second\r\nexport const getStaticProps = async context => {\r\n\t// context also can get current path params\r\n\tconst meetupId = context.params.meetupId;\r\n\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tmeetupData: {\r\n\t\t\t\timage:\r\n\t\t\t\t\t'https://images.unsplash.com/photo-1642871286987-2592c26407e2?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=764&q=80',\r\n\t\t\t\ttitle: 'The first Meetup',\r\n\t\t\t\taddress:\r\n\t\t\t\t\t'New York Avenue Northeast, Washington, District of Columbia, 20722, United States',\r\n\t\t\t\tid: { meetupId },\r\n\t\t\t\tdescription: 'The first Meetup',\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport default MeetupDetailsPage;\r\n"]},"metadata":{},"sourceType":"module"}